{
  "$schema": "https://raw.githubusercontent.com/neuro-graph/schemas/2025-1/neuro.schema.json",
  "metadata": {
    "model": {
      "name": "example_model",
      "version": "0.0.1",
      "description": "An example neruo model definition.",
      "author": "Your Name",
      "license": "Apache-2.0",
      "tags": ["example", "neuro", "unpacked"],
      // The "ui" section is a place where the author can define how the model might be presented in a user interface (completely optional to be ignored by end tools).
      "ui": {
        "display_name": "Example Model", // A human-readable name for the model
        "description": "This is an example model for demonstration purposes.", // A different description for UI purposes (website might use the `model.description`, while an end-user-tool might use this one)
        // Prompting is an optional section which describes how a model should be prompted, this only really applies to models which CAN be prompted of course.
        "prompting": {
          // The "phrases" array is a place where the author can suggest specific words or phrases (or any text string) to be used when prompting.
          "phrases": {
            "required": "xXRealismExplosionXx", // A required phrase that MUST be included in the prompt for the model to work correctly (Eg: for a character LoRA).
            "recommended": [
              // An array of suggested phrases that can be used to prompt the model, end-tools will ideally show these to the user as they are typing their prompt.
              "realism",
              "photorealism",
              "photorealistic",
              "masterpiece"
            ]
          }
        },
        "icon": "icon.png", // resource link to an icon representing the model
        "color": "#FF5733" // A color associated with the model, used for UI theming
      }
    },
    "i_am_a_third_party_section": {
      "description": "third-party tools can use custom sections under 'metadata' to store additional info.",
      "custom_data": "This is a custom field for third-party tools."
    }
  },
  "inputs": [
    {
      "name": "my_input1",
      "description": "The first input tensor for the model.",
      "shape": [1, 3, 224, 224],
      "dtype": "uint32"
    },
    {
      "name": "timestep",
      "description": "A single timestep value for the model.",
      "shape": [1],
      "dtype": "float32",
      "default": [0.0],
      "optional": true
    },
    {
      "name": "encoder_hidden_states",
      "shape": [1, 77, 768],
      "dtype": "float32"
    }
  ],

  "outputs": [
    {
      "name": "output1",
      "shape": [1, 1000],
      "dtype": "float32",
      "value": { "ref": "export/relu1" }
    },
    {
      "name": "output2",
      "shape": [1, 3, 224, 224],
      "dtype": "float32",
      "value": { "ref": "export/conv1" }
    }
  ],

  "imports": [
    {
      "name": "model_weights",
      "type": "safetensors",
      "path": "./weights/model.safetensors"
    },
    {
      "name": "imported_model",
      "type": "neuro",
      "path": "./imported_model.neuro.json"
    }
  ],

  "constants": [
    {
      "name": "network_depth",
      "type": "scalar",
      "value": 9001,
      "description": "The number of layers per block in the model."
    },
    {
      "name": "projection_dim",
      "type": "scalar",
      "value": 768,
      "description": "The dimension of the projection layer in the model."
    },
    {
      "name": "unet_weights",
      "type": "tensor",
      "dtype": "float32",
      "shape": [1, 3, 224, 224],
      "value": {
        "ref": "model_weights:any_named_layer_from_safetensors_file"
      }
    },
    {
      "name": "conv1_weights",
      "type": "tensor",
      "dtype": "float32",
      "shape": [3, 3],
      "value": {
        "type": "base64",
        "value": "base64_encoded_weights_string_here"
      }
    },
    {
      "name": "scaling_factor",
      "type": "tensor",
      "dtype": "float32",
      "shape": [1],
      "value": [0.5]
    }
  ],
  "definitions": [
    {
      "name": "conv1",
      "type": "conv",
      "attributes": {
        "kernel_size": [3, 3],
        "stride": [1, 1],
        "padding": [1, 1]
      },
      "weights": {
        "ref": "variables/conv1_weights"
      }
    },
    {
      "name": "scaled_input",
      "type": "graph",
      "graph": {
        "nodes": [
          {
            "name": "input_node",
            "type": "tensor",
            "shape": [1, 3, 224, 224],
            "dtype": "float32",
            "value": {
              "ref": "inputs/my_input1"
            }
          },
          {
            "name": "scale_node",
            "type": "mul",
            "arguments": ["input_node", { "ref": "variables/scaling_factor" }]
          }
        ]
      }
    }
  ],
  "export": [
    {
      "name": "first_node",
      "type": { "ref": "definitions/scaled_input" }
    },
    {
      "name": "conv1",
      "type": { "ref": "definitions/conv1" },
      "arguments": ["first_node"]
    },
    {
      "name": "relu1",
      "type": "relu",
      "arguments": ["conv1"],
      "attributes": {},
      "weights": {
        "name": "relu1_weights",
        "type": "hex",
        "value": [
          0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
          0x0c, 0x0d, 0x0e, 0x0f, 0x10
        ]
      }
    }
  ]
}
