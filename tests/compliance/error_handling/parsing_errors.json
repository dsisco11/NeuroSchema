{
  "$schema": "../../tests.schema.json",
  "metadata": {
    "name": "Parsing and Structure Error Tests",
    "version": "1.0.0",
    "description": "Tests for proper handling of parsing errors and invalid model structures",
    "category": "error_handling"
  },
  "tests": [
    {
      "id": "invalid_model_structure",
      "title": "Invalid Model Structure",
      "description": "Verify that logically invalid model structures produce the correct error code",
      "feature": "error_handling",
      "tags": ["parsing", "structure", "validation"],
      "inputs": {
        "neuro_model": {
          "$schema": "https://raw.githubusercontent.com/neuro-format/schemas/2025-1/neuro.schema.json",
          "metadata": {
            "model": {
              "name": "invalid_structure_test",
              "version": "1.0.0"
            }
          },
          "inputs": [
            {
              "name": "input",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "outputs": [
            {
              "name": "output",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "export": [
            {
              "name": "undefined_reference",
              "type": "identity",
              "arguments": ["undefined_input"]
            }
          ]
        }
      },
      "expected": {
        "error": {
          "code": "neuro.parse.invalid_structure",
          "message_pattern": ".*export.*references.*undefined.*"
        }
      }
    },
    {
      "id": "missing_required_section",
      "title": "Missing Required Section",
      "description": "Verify that missing required sections produce the correct error code",
      "feature": "error_handling",
      "tags": ["parsing", "missing_section", "validation"],
      "inputs": {
        "neuro_model": {
          "$schema": "https://raw.githubusercontent.com/neuro-format/schemas/2025-1/neuro.schema.json",
          "metadata": {
            "model": {
              "name": "missing_section_test",
              "version": "1.0.0"
            }
          },
          "inputs": [
            {
              "name": "input",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "outputs": [
            {
              "name": "output",
              "shape": [10],
              "dtype": "float32"
            }
          ]
        }
      },
      "expected": {
        "error": {
          "code": "neuro.parse.missing_section",
          "message_pattern": ".*missing.*required.*export.*"
        }
      }
    },
    {
      "id": "empty_required_section",
      "title": "Empty Required Section",
      "description": "Verify that empty required sections produce the correct error code",
      "feature": "error_handling",
      "tags": ["parsing", "empty_section", "validation"],
      "inputs": {
        "neuro_model": {
          "$schema": "https://raw.githubusercontent.com/neuro-format/schemas/2025-1/neuro.schema.json",
          "metadata": {
            "model": {
              "name": "empty_section_test",
              "version": "1.0.0"
            }
          },
          "inputs": [
            {
              "name": "input",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "outputs": [
            {
              "name": "output",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "export": []
        }
      },
      "expected": {
        "error": {
          "code": "neuro.parse.empty_section",
          "message_pattern": ".*empty.*export.*section.*"
        }
      }
    },
    {
      "id": "duplicate_import_names",
      "title": "Duplicate Import Names",
      "description": "Verify that duplicate import names produce the correct error code",
      "feature": "error_handling",
      "tags": ["imports", "duplicates", "validation"],
      "inputs": {
        "neuro_model": {
          "$schema": "https://raw.githubusercontent.com/neuro-format/schemas/2025-1/neuro.schema.json",
          "metadata": {
            "model": {
              "name": "duplicate_import_test",
              "version": "1.0.0"
            }
          },
          "imports": [
            {
              "name": "shared_module",
              "type": "neuro",
              "path": "./module1.neuro.json"
            },
            {
              "name": "shared_module",
              "type": "neuro", 
              "path": "./module2.neuro.json"
            }
          ],
          "inputs": [
            {
              "name": "input",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "outputs": [
            {
              "name": "output",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "export": [
            {
              "name": "identity",
              "type": "identity",
              "arguments": ["input"]
            }
          ]
        }
      },
      "expected": {
        "error": {
          "code": "neuro.ref.duplicate_import",
          "message_pattern": ".*duplicate.*import.*shared_module.*"
        }
      }
    },
    {
      "id": "import_not_found",
      "title": "Import Not Found",
      "description": "Verify that missing import files produce the correct error code",
      "feature": "error_handling",
      "tags": ["imports", "file_not_found", "validation"],
      "inputs": {
        "neuro_model": {
          "$schema": "https://raw.githubusercontent.com/neuro-format/schemas/2025-1/neuro.schema.json",
          "metadata": {
            "model": {
              "name": "import_not_found_test",
              "version": "1.0.0"
            }
          },
          "imports": [
            {
              "name": "missing_module",
              "type": "neuro",
              "path": "./nonexistent/module.neuro.json"
            }
          ],
          "inputs": [
            {
              "name": "input",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "outputs": [
            {
              "name": "output",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "export": [
            {
              "name": "imported_node",
              "type": "missing_module",
              "arguments": ["input"]
            }
          ]
        }
      },
      "expected": {
        "error": {
          "code": "neuro.ref.import_not_found",
          "message_pattern": ".*import.*missing_module.*file.*nonexistent.*"
        }
      }
    },
    {
      "id": "unsupported_schema_version",
      "title": "Unsupported Schema Version",
      "description": "Verify that unsupported schema versions produce the correct error code",
      "feature": "error_handling",
      "tags": ["schema", "version", "compatibility"],
      "inputs": {
        "neuro_model": {
          "$schema": "https://raw.githubusercontent.com/neuro-format/schemas/2024-1/neuro.schema.json",
          "metadata": {
            "model": {
              "name": "version_test",
              "version": "1.0.0"
            }
          },
          "inputs": [
            {
              "name": "input",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "outputs": [
            {
              "name": "output",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "export": [
            {
              "name": "identity",
              "type": "identity",
              "arguments": ["input"]
            }
          ]
        }
      },
      "expected": {
        "error": {
          "code": "neuro.schema.unsupported_version",
          "message_pattern": ".*unsupported.*schema.*2024-1.*"
        }
      }
    },
    {
      "id": "invalid_namespace_format",
      "title": "Invalid Namespace Format",
      "description": "Verify that malformed namespace syntax produces the correct error code",
      "feature": "error_handling",
      "tags": ["namespace", "syntax", "validation"],
      "inputs": {
        "neuro_model": {
          "$schema": "https://raw.githubusercontent.com/neuro-format/schemas/2025-1/neuro.schema.json",
          "metadata": {
            "model": {
              "name": "namespace_test",
              "version": "1.0.0"
            }
          },
          "inputs": [
            {
              "name": "input",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "outputs": [
            {
              "name": "output",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "export": [
            {
              "name": "invalid_ns",
              "type": "my@company:invalid:layer",
              "arguments": ["input"]
            }
          ]
        }
      },
      "expected": {
        "error": {
          "code": "neuro.type.invalid_namespace",
          "message_pattern": ".*invalid.*namespace.*my@company:invalid:layer.*"
        }
      }
    },
    {
      "id": "definition_not_found",
      "title": "Definition Not Found",
      "description": "Verify that references to missing definitions produce the correct error code",
      "feature": "error_handling",
      "tags": ["definitions", "references", "validation"],
      "inputs": {
        "neuro_model": {
          "$schema": "https://raw.githubusercontent.com/neuro-format/schemas/2025-1/neuro.schema.json",
          "metadata": {
            "model": {
              "name": "definition_not_found_test",
              "version": "1.0.0"
            }
          },
          "inputs": [
            {
              "name": "input",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "outputs": [
            {
              "name": "output",
              "shape": [10],
              "dtype": "float32"
            }
          ],
          "export": [
            {
              "name": "missing_def",
              "type": "nonexistent_definition",
              "arguments": ["input"]
            }
          ]
        }
      },
      "expected": {
        "error": {
          "code": "neuro.ref.definition_not_found",
          "message_pattern": ".*definition.*nonexistent_definition.*not found.*"
        }
      }
    }
  ]
}
