{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/neuro-graph/schemas/2025-1/neuro.schema.json",
  "title": "NeuroGraph Schema",
  "description": "JSON Schema for NeuroGraph neural network model definitions",
  "type": "object",
  "required": ["metadata", "inputs", "outputs", "export"],
  "properties": {
    "$schema": {
      "type": "string",
      "description": "Reference to the JSON schema that validates this document"
    },
    "metadata": {
      "type": "object",
      "description": "Metadata about the model including name, version, description, and other properties",
      "required": ["model"],
      "properties": {
        "model": {
          "type": "object",
          "description": "Core model metadata",
          "required": ["name", "version", "modalities"],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the model"
            },
            "version": {
              "type": "string",
              "description": "The version of the model"
            },
            "description": {
              "type": "string",
              "description": "A description of the model"
            },
            "author": {
              "type": "string",
              "description": "The author of the model"
            },
            "license": {
              "type": "string",
              "description": "The license under which the model is distributed"
            },
            "tags": {
              "type": "array",
              "description": "Tags associated with the model",
              "items": {
                "type": "string"
              }
            },
            "modalities": {
              "type": "object",
              "description": "Input and output modality specifications for categorizing model data types",
              "required": ["inputs", "outputs"],
              "properties": {
                "inputs": {
                  "type": "array",
                  "description": "Modality types for model inputs",
                  "items": {
                    "$ref": "#/definitions/modality_type"
                  }
                },
                "outputs": {
                  "type": "array",
                  "description": "Modality types for model outputs",
                  "items": {
                    "$ref": "#/definitions/modality_type"
                  }
                }
              }
            },
            "ui": {
              "type": "object",
              "description": "User interface presentation information",
              "properties": {
                "display_name": {
                  "type": "string",
                  "description": "Human-readable name for the model"
                },
                "description": {
                  "type": "string",
                  "description": "UI-specific description"
                },
                "prompting": {
                  "type": "object",
                  "description": "Prompting configuration for models that support prompting",
                  "properties": {
                    "phrases": {
                      "type": "object",
                      "properties": {
                        "required": {
                          "type": "string",
                          "description": "Required phrase that must be included in prompts"
                        },
                        "recommended": {
                          "type": "array",
                          "description": "Recommended phrases for prompting",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "icon": {
                  "type": "string",
                  "description": "Resource link to an icon representing the model"
                },
                "colors": {
                  "type": "object",
                  "description": "Color theming configuration for light and dark modes",
                  "properties": {
                    "light": {
                      "type": "object",
                      "description": "Colors for light theme",
                      "properties": {
                        "primary": {
                          "type": "string",
                          "pattern": "^#[0-9A-Fa-f]{6}$",
                          "description": "Primary color for light theme"
                        },
                        "secondary": {
                          "type": "string",
                          "pattern": "^#[0-9A-Fa-f]{6}$",
                          "description": "Secondary color for light theme"
                        }
                      }
                    },
                    "dark": {
                      "type": "object",
                      "description": "Colors for dark theme",
                      "properties": {
                        "primary": {
                          "type": "string",
                          "pattern": "^#[0-9A-Fa-f]{6}$",
                          "description": "Primary color for dark theme"
                        },
                        "secondary": {
                          "type": "string",
                          "pattern": "^#[0-9A-Fa-f]{6}$",
                          "description": "Secondary color for dark theme"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "additionalProperties": {
        "type": "object",
        "description": "Third-party sections for custom metadata"
      }
    },
    "inputs": {
      "type": "array",
      "description": "Input tensors that the model expects",
      "items": {
        "$ref": "#/definitions/tensor_spec"
      }
    },
    "outputs": {
      "type": "array",
      "description": "Output tensors that the model produces",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/tensor_spec" },
          {
            "properties": {
              "value": {
                "$ref": "#/definitions/output_reference",
                "description": "Reference to the source of this output value"
              }
            }
          }
        ]
      }
    },
    "imports": {
      "type": "array",
      "description": "External resources required by the model",
      "items": {
        "type": "object",
        "required": ["name", "type", "path"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name identifier for the imported resource. For 'neuro' imports, this name can be used as a node type or namespace for accessing the imported model's contents (e.g., 'name:constants/value')"
          },
          "type": {
            "type": "string",
            "enum": ["safetensors", "neuro"],
            "description": "Type of the imported resource. 'safetensors' imports tensor data, 'neuro' imports make the entire model available as a node type and its sections accessible via namespace syntax"
          },
          "path": {
            "type": "string",
            "description": "Path to the imported file or resource. For 'safetensors', this is the file path to the weights file. For 'neuro', this is the path to the model file"
          }
        }
      }
    },
    "constants": {
      "type": "array",
      "description": "Immutable named variables such as weights, biases, and other referenceable data",
      "items": {
        "type": "object",
        "required": ["name", "type"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name identifier for the constant"
          },
          "type": {
            "type": "string",
            "enum": ["tensor", "scalar"],
            "description": "Type of the constant"
          },
          "dtype": {
            "$ref": "#/definitions/data_type"
          },
          "shape": {
            "$ref": "#/definitions/tensor_shape"
          },
          "value": {
            "oneOf": [
              { "$ref": "#/definitions/data_reference" },
              { "$ref": "#/definitions/base64_value" },
              { "$ref": "#/definitions/hex_value" },
              { "type": "array" },
              { "type": "number" },
              { "type": "string" }
            ],
            "description": "The value of the constant"
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the constant's purpose and usage"
          }
        }
      }
    },
    "definitions": {
      "type": "array",
      "description": "Reusable node or layer definitions",
      "items": {
        "$ref": "#/definitions/node_definition"
      }
    },
    "export": {
      "type": "array",
      "description": "The primary exported model structure as a series of node instances",
      "items": {
        "$ref": "#/definitions/node_instance"
      }
    }
  },
  "definitions": {
    "modality_type": {
      "type": "string",
      "enum": [
        "vision",
        "text",
        "audio",
        "tabular",
        "timeseries",
        "graph",
        "spatial",
        "syntax_tree",
        "custom"
      ],
      "description": "Supported modality types for model input/output categorization. vision: 2D image/video data, text: natural language processing, audio: speech/music/audio signals, tabular: structured data without temporal dependencies, timeseries: sequential numerical data with temporal dependencies, graph: network/graph structured data, spatial: 3D spatial data like point clouds/meshes, syntax_tree: AST tokens and structured code representations, custom: domain-specific data types"
    },
    "anyint": {
      "type": "string",
      "enum": ["int8", "int16", "int32", "int64"],
      "description": "Any signed integer type regardless of bit width"
    },
    "anyuint": {
      "type": "string",
      "enum": ["uint8", "uint16", "uint32", "uint64"],
      "description": "Any unsigned integer type regardless of bit width"
    },
    "anyfloat": {
      "type": "string",
      "enum": ["float16", "float32", "float64"],
      "description": "Any floating-point type regardless of bit width"
    },
    "anynumeric": {
      "type": "string",
      "enum": [
        "int8",
        "int16",
        "int32",
        "int64",
        "uint8",
        "uint16",
        "uint32",
        "uint64",
        "float16",
        "float32",
        "float64"
      ],
      "description": "Any numeric type (integer, unsigned integer, or floating-point)"
    },
    "data_type": {
      "type": "string",
      "enum": [
        "int8",
        "int16",
        "int32",
        "int64",
        "uint8",
        "uint16",
        "uint32",
        "uint64",
        "float16",
        "float32",
        "float64",
        "bool",
        "string"
      ],
      "description": "Supported data types for tensors"
    },
    "tensor_shape": {
      "type": "array",
      "items": {
        "type": "integer",
        "minimum": -1
      },
      "description": "Shape of a tensor, where -1 indicates dynamic dimension"
    },
    "tensor_spec": {
      "type": "object",
      "required": ["name", "shape", "dtype"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the tensor"
        },
        "description": {
          "type": "string",
          "description": "Description of the tensor's purpose"
        },
        "shape": {
          "$ref": "#/definitions/tensor_shape"
        },
        "dtype": {
          "$ref": "#/definitions/data_type"
        },
        "default": {
          "type": "array",
          "description": "Default value for optional inputs"
        },
        "optional": {
          "type": "boolean",
          "description": "Whether this tensor is optional"
        }
      }
    },
    "qualified_name": {
      "type": "string",
      "pattern": "^(\\w+:)?\\w+(\\/\\w+)*$",
      "description": "A qualified name that can optionally include a namespace and path segments in the format 'namespace:path/to/item', 'path/to/item', or just 'name'. Used for type references, node names, and other identifiers throughout the schema."
    },
    "node_reference": {
      "$ref": "#/definitions/qualified_name",
      "description": "Path reference to a named node (input, definition, or local node within a graph). Simple name for local references, or path-like notation for nested references. Supports namespace syntax 'import_name:section/item' for accessing imported model contents."
    },
    "data_reference": {
      "type": "object",
      "required": ["ref"],
      "properties": {
        "ref": {
          "type": "string",
          "pattern": "^((\\w+:)?(variables|constants)\\/\\w+|variables\\/\\w+)$",
          "description": "Path reference to a data object in the variables/constants section or imported namespace (e.g., 'variables/name', 'import_name:constants/value')"
        }
      },
      "description": "Reference to a data object defined in the variables/constants section or imported from another model"
    },
    "weight_reference": {
      "type": "object",
      "required": ["ref"],
      "properties": {
        "ref": {
          "type": "string",
          "pattern": "^((\\w+[:\\/])?\\w+\\/\\w+|(variables|weights)\\/\\w+)$",
          "description": "Path reference to weight data in variables/weights section or imported resources (e.g., 'weights/name', 'safetensors_import/tensor_name')"
        }
      },
      "description": "Reference to weight data defined in the variables/weights section or imported from safetensors files"
    },
    "output_reference": {
      "type": "object",
      "required": ["ref"],
      "properties": {
        "ref": {
          "$ref": "#/definitions/node_reference",
          "description": "Path reference to a node output"
        },
        "output": {
          "type": "string",
          "description": "Specific output name for nodes with multiple outputs (optional)"
        }
      },
      "description": "Reference to the output of a specific node, optionally specifying which output for multi-output nodes"
    },
    "base64_value": {
      "type": "object",
      "required": ["type", "value"],
      "properties": {
        "type": {
          "type": "string",
          "const": "base64"
        },
        "value": {
          "type": "string",
          "pattern": "^[A-Za-z0-9+/]*={0,2}$",
          "description": "Base64 encoded data"
        }
      }
    },
    "hex_value": {
      "type": "object",
      "required": ["name", "type", "value"],
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "const": "hex"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "description": "Array of hexadecimal byte values"
        }
      }
    },
    "node_definition": {
      "type": "object",
      "required": ["name", "type"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the node definition"
        },
        "type": {
          "oneOf": [
            { "$ref": "operators.schema.json#/definitions/operator_type" },
            { "$ref": "layers.schema.json#/definitions/layer_type" },
            {
              "$ref": "architectures.schema.json#/definitions/architecture_type"
            }
          ],
          "description": "Type of the node operation - can be an operator, layer, or architecture"
        },
        "parameters": {
          "type": "object",
          "description": "Parameter schema that defines what inputs this node type expects",
          "properties": {
            "inputs": {
              "type": "array",
              "description": "Expected input parameters for this node type",
              "items": {
                "type": "object",
                "required": ["name", "type"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the input parameter"
                  },
                  "type": {
                    "type": "string",
                    "description": "Expected type of the input"
                  },
                  "required": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether this input is required"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the input parameter"
                  }
                }
              }
            },
            "attributes": {
              "type": "object",
              "description": "Expected attributes schema for this node type"
            }
          }
        },
        "implementation": {
          "type": "object",
          "description": "Implementation details for this node definition",
          "properties": {
            "graph": {
              "type": "object",
              "description": "Graph structure defining the internal node composition",
              "required": ["nodes"],
              "properties": {
                "nodes": {
                  "type": "array",
                  "description": "Array of nodes that make up this graph",
                  "items": {
                    "$ref": "#/definitions/graph_node"
                  }
                },
                "metadata": {
                  "type": "object",
                  "description": "Optional metadata about the graph structure"
                }
              }
            },
            "weights": {
              "oneOf": [
                { "$ref": "#/definitions/weight_reference" },
                { "$ref": "#/definitions/hex_value" }
              ],
              "description": "Default weights for the node definition"
            }
          }
        }
      }
    },
    "node_instance": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this node instance"
        },
        "type": {
          "oneOf": [
            { "$ref": "operators.schema.json#/definitions/operator_type" },
            { "$ref": "layers.schema.json#/definitions/layer_type" },
            {
              "$ref": "architectures.schema.json#/definitions/architecture_type"
            },
            { "$ref": "#/definitions/node_reference" }
          ],
          "description": "Type of the node operation or reference to a node definition declared in the definitions section"
        },
        "arguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node_reference"
          },
          "description": "Input arguments for this node instance - references to input tensors, other nodes, or definitions"
        },
        "attributes": {
          "type": "object",
          "description": "Specific attribute values for this node instance"
        },
        "weights": {
          "oneOf": [
            { "$ref": "#/definitions/weight_reference" },
            { "$ref": "#/definitions/hex_value" }
          ],
          "description": "Specific weights for this node instance"
        }
      }
    },
    "graph_node": {
      "type": "object",
      "description": "A node within a graph - can be either a definition or instance depending on context",
      "required": ["name", "type"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the graph node"
        },
        "type": {
          "oneOf": [
            { "$ref": "operators.schema.json#/definitions/operator_type" },
            { "$ref": "layers.schema.json#/definitions/layer_type" },
            {
              "$ref": "architectures.schema.json#/definitions/architecture_type"
            },
            { "$ref": "#/definitions/node_reference" }
          ],
          "description": "Type of the operation or reference to definition"
        },
        "shape": {
          "$ref": "#/definitions/tensor_shape"
        },
        "dtype": {
          "$ref": "#/definitions/data_type"
        },
        "value": {
          "oneOf": [
            { "$ref": "#/definitions/data_reference" },
            { "type": "array" },
            { "type": "number" }
          ]
        },
        "arguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node_reference"
          },
          "description": "Arguments for the operation - references to input tensors, other nodes, or definitions"
        },
        "attributes": {
          "type": "object",
          "description": "Attributes for this graph node"
        },
        "weights": {
          "oneOf": [
            { "$ref": "#/definitions/weight_reference" },
            { "$ref": "#/definitions/hex_value" }
          ],
          "description": "Weights for this specific node"
        },
        "bias": {
          "oneOf": [
            { "$ref": "#/definitions/weight_reference" },
            { "$ref": "#/definitions/hex_value" }
          ],
          "description": "Bias for this specific node"
        }
      }
    }
  }
}
